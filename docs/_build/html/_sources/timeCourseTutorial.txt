{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "# Importing and Working with fDAPI.TimeCourse Objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Naveen\\Anaconda3\\lib\\site-packages\\IPython\\html.py:14: ShimWarning: The `IPython.html` package has been deprecated. You should import from `notebook` instead. `IPython.html.widgets` has moved to `ipywidgets`.\n",
      "  \"`IPython.html.widgets` has moved to `ipywidgets`.\", ShimWarning)\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.append('../')\n",
    "\n",
    "import fDAPI\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initialize the time course object, and set the titer type (for curve fitting)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "timeCourse = fDAPI.TimeCourse(removeDeathPhaseFlag=True)\n",
    "timeCourse.runIdentifier.titerType = 'OD'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "timeCourse.timeVec = [0,2,4,6,8,10,12,14,16,18,20,22,24,26]\n",
    "timeCourse.dataVec = [0.02,0.1,0.2,0.4,0.8,1.6,1.7,1.72,1.72,1.6,1.55,1.5,1.45,1.4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the data is imported, curve fitting has already been performed and we can retrieve the curve fit parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "timeCourse.getFitParameters()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also retrieve and plot the curve fit data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "handle = []\n",
    "curveFitTimeVec = np.linspace(0,max(timeCourse.timeVec),50)\n",
    "handle.append(plt.plot(curveFitTimeVec,timeCourse.returnCurveFitPoints(curveFitTimeVec))[0])\n",
    "handle.append(plt.plot(timeCourse.timeVec,timeCourse.dataVec)[0])\n",
    "plt.ylabel('OD$_{600}$')\n",
    "plt.xlabel('Time (hours)')\n",
    "plt.legend(handle,['Curve Fit','Raw Data'],loc=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can notice that the curve fit is biased by the deatphase. Here we can enable the removeDeathPhaseFlag = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "timeCourse = fDAPI.TimeCourse(removeDeathPhaseFlag = True)\n",
    "timeCourse.runIdentifier.titerType = 'OD'\n",
    "\n",
    "timeCourse.timeVec = [0,2,4,6,8,10,12,14,16,18,20,22]\n",
    "timeCourse.dataVec = [0.02,0.1,0.2,0.4,0.8,1.6,1.7,1.6,1.55,1.5,1.45,1.4]\n",
    "print('Death phase starts at: ',timeCourse.timeVec[timeCourse.deathPhaseStart],'hours')\n",
    "%matplotlib inline\n",
    "handle = []\n",
    "curveFitTimeVec = np.linspace(0,max(timeCourse.timeVec),50)\n",
    "handle.append(plt.plot(curveFitTimeVec,timeCourse.returnCurveFitPoints(curveFitTimeVec))[0])\n",
    "handle.append(plt.plot(timeCourse.timeVec,timeCourse.dataVec)[0])\n",
    "plt.ylabel('OD$_{600}$')\n",
    "plt.xlabel('Time (hours)')\n",
    "plt.legend(handle,['Curve Fit','Raw Data'],loc=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
